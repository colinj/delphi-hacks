unit TestAreaAggegator;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uAreaAggegator, SysUtils, Classes, uShapes;

type
    TestTAreaAggregator = class(TTestCase)
    private
        FAreaAggregator: TAreaAggregator;
    public
        procedure SetUp; override;
        procedure TearDown; override;
    published
        procedure TestSumArea_ZeroShapes;

        procedure TestSumArea_OneRectangle;
        procedure TestSumArea_TwoRectangles;
        procedure TestSumArea_ThreeRectangles;

        procedure TestSumArea_OneCircle;
        procedure TestSumArea_TwoCircles;

        procedure TestSumArea_MixedShapes;
    end;

implementation

const
    DELTA = 0.000001;

procedure TestTAreaAggregator.SetUp;
begin
    FAreaAggregator := TAreaAggregator.Create;
end;

procedure TestTAreaAggregator.TearDown;
begin
    FAreaAggregator.Free;
    FAreaAggregator := nil;
end;

procedure TestTAreaAggregator.TestSumArea_ZeroShapes;
var
    ReturnValue: Double;
begin
    ReturnValue := FAreaAggregator.SumArea([]);

    CheckEquals(0, ReturnValue);
end;

procedure TestTAreaAggregator.TestSumArea_MixedShapes;
var
    ReturnValue: Double;
    C1: TCircle;
    R1: TRectangle;
begin
    C1 := TCircle.Create(5);
    R1 := TRectangle.Create(4, 8);
    try
        ReturnValue := FAreaAggregator.SumArea([C1, R1]);
    finally
        C1.Free;
        R1.Free;
    end;

    CheckEquals((25 * Pi) + 32, ReturnValue, DELTA);
end;

procedure TestTAreaAggregator.TestSumArea_OneCircle;
var
    ReturnValue: Double;
    C1: TCircle;
begin
    C1 := TCircle.Create(1);
    try
        ReturnValue := FAreaAggregator.SumArea([C1]);
    finally
        C1.Free;
    end;

    CheckEquals(Pi, ReturnValue, DELTA);
end;

procedure TestTAreaAggregator.TestSumArea_OneRectangle;
var
    ReturnValue: Double;
    R1: TRectangle;
begin
    R1 := TRectangle.Create(3, 4);
    try
        ReturnValue := FAreaAggregator.SumArea([R1]);
    finally
        R1.Free;
    end;

    CheckEquals(12, ReturnValue);
end;

procedure TestTAreaAggregator.TestSumArea_TwoCircles;
var
    ReturnValue: Double;
    C1, C2: TCircle;
begin
    C1 := TCircle.Create(1);
    C2 := TCircle.Create(6);
    try
        ReturnValue := FAreaAggregator.SumArea([C1, C2]);
    finally
        C1.Free;
        C2.Free;
    end;

    CheckEquals(Pi * 37, ReturnValue, DELTA);
end;

procedure TestTAreaAggregator.TestSumArea_TwoRectangles;
var
    ReturnValue: Double;
    R1, R2: TRectangle;
begin
    R1 := TRectangle.Create(3, 4);
    R2 := TRectangle.Create(8, 2);
    try
        ReturnValue := FAreaAggregator.SumArea([R1, R2]);
    finally
        R1.Free;
        R2.Free;
    end;

    CheckEquals(28, ReturnValue);
end;

procedure TestTAreaAggregator.TestSumArea_ThreeRectangles;
var
    ReturnValue: Double;
    R1, R2, R3: TRectangle;
begin
    R1 := TRectangle.Create(3, 4);
    R2 := TRectangle.Create(8, 2);
    R3 := TRectangle.Create(5, 6);
    try
        ReturnValue := FAreaAggregator.SumArea([R1, R2, R3]);
    finally
        R1.Free;
        R2.Free;
        R3.Free;
    end;

    CheckEquals(58, ReturnValue);
end;

initialization

  RegisterTest(TestTAreaAggregator.Suite);

end.

